# open bestk_results.csv
import json
import math

import pandas as pd

from bpllib.utils import easy_datasets, medium_datasets, hard_datasets

METHODS = ['Find-RS', 'RIPPER', 'ID3', 'AQ', 'BRS']
DATASETS = easy_datasets + ['-'] + medium_datasets + ['-'] + hard_datasets
df = pd.read_csv('../images/best-k/bestk_results.csv')
df2 = pd.read_csv('../images/best-k/bestk_results-hard.csv')

# join, prefer df2
df = pd.concat([df2, df]).drop_duplicates(subset=['dataset', 'method', 'encoding'], keep='first')

N_RULES = {
    'easy': 10,
    'medium': 50,
    'hard': 150
}
print("% autogenerated by best_k_table.py (N={})".format(len(df)))

print("""
\\begin{tabular}{ l | l l l l l | l l l}
\\hline
""")

for method in METHODS:
    print(f'& \\textbf{{{method}}} ', end='')
print('\\\\ \\hline')


def get_n_rules(dataset):
    n_rules = N_RULES['easy'] if dataset in easy_datasets else N_RULES[
        'medium'] if dataset in medium_datasets else N_RULES['hard']
    return n_rules


for dataset in DATASETS:
    if dataset == '-':
        print(f'\\hline')
        continue
    if dataset == 'LYMPHOGRAPHY':
        print(f'\\texttt{{LYMPH.}} ', end='')
    else:
        print(f'\\texttt{{{dataset}}} ', end='')

    best_method = None
    best_metric7 = float('-inf')
    best_metric5 = float('-inf')

    for method in METHODS:
        avgs = []
        stds = []
        for enc in ["av", "ohe"]:
            n_rules = get_n_rules(dataset)
            rows = df[(df['dataset'] == dataset) & (df['method'] == method)
                      & (df['encoding'] == enc)]
            if len(rows) == 0:
                avgs.append(0)
                stds.append(0)
            else:
                row = rows.iloc[0]
                y = json.loads(row['y'])
                avg_metric = y[min(n_rules, len(y) - 1)]
                y_std = json.loads(row['y_std'])
                std_metric = y_std[min(n_rules, len(y_std) - 1)]
                avgs.append(avg_metric)
                stds.append(std_metric)

        # set nan to 0 (damn brs)
        avgs = [0 if math.isnan(x) else x for x in avgs]
        stds = [0 if math.isnan(x) else x for x in stds]

        best_enc_idx = avgs.index(max(avgs))
        best_enc = ["av", "ohe"][best_enc_idx]
        avg_metric = avgs[best_enc_idx]
        std_metric = stds[best_enc_idx]

        if avg_metric > best_metric5 and method not in ['RF', 'SVM', 'TabNet']:
            best_method = method
            best_metric5 = avg_metric
        if avg_metric > best_metric7:
            best_method = method
            best_metric7 = avg_metric

    for method in METHODS:
        avgs = []
        stds = []
        for enc in ["av", "ohe"]:
            n_rules = get_n_rules(dataset)
            rows = df[(df['dataset'] == dataset) & (df['method'] == method)
                      & (df['encoding'] == enc)]
            if len(rows) == 0:
                avgs.append(0)
                stds.append(0)
            else:
                row = rows.iloc[0]
                y = json.loads(row['y'])
                avg_metric = y[min(n_rules, len(y) - 1)]
                y_std = json.loads(row['y_std'])
                std_metric = y_std[min(n_rules, len(y_std) - 1)]
                avgs.append(avg_metric)
                stds.append(std_metric)

        # set nan to 0 (damn brs)
        avgs = [0 if math.isnan(x) else x for x in avgs]
        stds = [0 if math.isnan(x) else x for x in stds]

        best_enc_idx = avgs.index(max(avgs))
        best_enc = ["av", "ohe"][best_enc_idx]
        avg_metric = avgs[best_enc_idx]
        std_metric = stds[best_enc_idx]
        marker = "" if best_enc == "av" else "$\\dagger$"

        if math.isnan(avg_metric) or avg_metric == 0:
            # put a dash
            print(f'& - ', end='')
        elif math.isnan(std_metric):
            # avoid +- nan for 1 seed
            if avg_metric == best_metric7:
                print(f'& \\textbf{{{avg_metric:.3f}}} {marker} ', end='')
            else:
                print(f'& {avg_metric:.3f} {marker} ', end='')
        else:

            # special formatting
            if best_metric7 == avg_metric or best_metric5 == avg_metric:
                if method not in ['RF', 'SVM', 'TabNet']:  # interpretable methods
                    if avg_metric == best_metric5:
                        if avg_metric == best_metric7:
                            print(
                                f'& \\underline{{\\textbf{{{avg_metric:.3f}}}}}\\tiny{{$\\pm${std_metric:.2f}}} \\small{{{marker}}} ',
                                end='')
                        else:
                            print(
                                f'& \\textbf{{{avg_metric:.3f}}}\\tiny{{$\\pm${std_metric:.2f}}} \\small{{{marker}}} ',
                                end='')
                else:  # uninterpretable methods
                    if avg_metric == best_metric7:
                        print(f'& \\underline{{{avg_metric:.3f}}}\\tiny{{$\\pm${std_metric:.2f}}} \\small{{{marker}}} ',
                              end='')
            # print as usual
            else:
                print(f'& {avg_metric:.3f}\\tiny{{$\\pm${std_metric:.2f}}} \\small{{{marker}}} ', end='')
    print('\\\\')

# Add average ranks

print(f'\\hline')
print(f'\\textbf{{AvgRank}} ', end='')

method_avgs = []
for method in ['Find-RS', 'RIPPER', 'ID3', 'AQ', 'BRS']:
    avgs = []
    stds = []
    for dataset in DATASETS:
        if dataset == '-':
            continue
        n_rules = get_n_rules(dataset)
        rows = df[(df['dataset'] == dataset) & (df['method'] == method) & (df['encoding'] == 'av')]
        if len(rows) == 0:
            av_avg_metric = 0
        else:
            row = rows.iloc[0]
            y = json.loads(row['y'])
            av_avg_metric = y[min(n_rules, len(y) - 1)]

        rows = df[(df['dataset'] == dataset) & (df['method'] == method) & (df['encoding'] == 'oh')]
        if len(rows) == 0:
            oh_avg_metric = 0
        else:
            row = rows.iloc[0]
            y = json.loads(row['y'])
            oh_avg_metric = y[min(n_rules, len(y) - 1)]

        av_avg_metric = 0 if math.isnan(av_avg_metric) else av_avg_metric
        oh_avg_metric = 0 if math.isnan(oh_avg_metric) else oh_avg_metric
        avg_metric = max(av_avg_metric, oh_avg_metric)
        avgs.append(avg_metric)
    method_avgs.append(avgs)

sc = pd.DataFrame(method_avgs)

avg_ranks = (sc.T).rank(axis=1, ascending=False, method='average').mean(axis=0)

for method, avg_rank in zip(['Find-RS', 'RIPPER', 'ID3', 'AQ', 'BRS'], avg_ranks):
    print(f'& {avg_rank:.2f} ', end='')
print('\\\\')

print("""
\\end{tabular}
""")
